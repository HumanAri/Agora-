# -*- coding: utf-8 -*-
"""Agora Scraper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aD-SJE276_qbaK-GYPxScljN7bm3TJTk
"""

pip install beautifulsoup4

pip install selenium

pip install webdriver-manager

import bs4
from bs4 import BeautifulSoup
import requests
import re
import nltk
nltk.download('wordnet')
from nltk.corpus import wordnet
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

def setUpDrive():
  chrome_options = webdriver.ChromeOptions()
  chrome_options.add_argument('--headless')
  chrome_options.add_argument('--no-sandbox')
  chrome_options.add_argument('--disable-dev-shm-usage')

  driver = webdriver.Chrome(options=chrome_options)

def findLink():
  start = input("Enter your starting point: ").replace(" ", "+")
  urly = "https://www.google.com/maps?"+start
  print(urly)



url = "https://www.google.com/maps/place/Worcester+Commons/@42.3932969,-72.5255048,17z/data=!4m8!3m7!1s0x89e6d279b7905b2f:0xbc52d728d8533ae1!8m2!3d42.3932969!4d-72.5255048!9m1!1b1!16s%2Fg%2F11b8zt4q29?entry=ttu"

response = requests.get(url)

driver.get(url)
html = driver.page_source

soupy = BeautifulSoup(html)

elementsRev = soupy.find_all('div', class_="MyEned")
print(elementsRev)

revs = soupy.find_all('span', class_="wiI7pd")
print(revs)

revList = []
for review in revs:
  revList.append(str(review).strip("<span class=\"wiI7pd\">").strip("</span>"))

print(revList)

fear = input("Area of concern: ")

# Finding hypernyms
syn = wordnet.synsets(fear)[0]
hypernyms = syn.hypernyms()
print(f"Hypernyms of {fear}: ", hypernyms)

# Finding hyponyms
syn = wordnet.synsets(fear)[0]
hyponyms = syn.hyponyms()
print(f"Hyponyms of {fear}: ", hyponyms)

relevant = []

relevant.append(fear)

for whatever in hyponyms:
  temp = whatever.name().replace("_", " ")
  relevant.append(re.sub("\.n.*", "", temp, 2))

for whatever in hypernyms:
  temp = whatever.name().replace("_", " ")
  relevant.append(re.sub("\.n.*", "", temp, 2))

print(relevant)

relCount = 0
count = len(revList[0])
for n in range(8):
  for word in revList[n].split(" "):
    #count += 1
    #print(word)
    if word in relevant:
      relCount += 1
      print("Relevant: "+word)

#print(count)
#print(relCount)
print(1000*(relCount/count))